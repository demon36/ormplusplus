ORM todo:
check if column exists before executing the query 
check database models are copy-able
assert condition fields are available at current model
retrieve only columns declared by user
check column types at retrieval and insertion
use const ref where possible
allow creating a database if requested one does not exist
start writing unit tests
start commenting out code
allow using .async() on a query
show descriptive exception messages
thread safety (db session, model instance)?
db session connection pool ?

when user tries to select where, he will have to type column name in snake case??
any better practice to that ?

watch this notation that is used by laravel's Eloquent:

	Schema::create('migration_statistics', function (Blueprint $table) {
		$table->increments('id');
		$table->integer('s3_migration_id')->unsigned()->index();

check if Poco::Nullable can be used ?

what should user do if he wants to connect to multiple databases and migrate objects from one to another for example
	use two modes of implementation
		send DB instance to model
		set default context DB to DB class and use it when user does not specify a db when creating a model instance 
	send database object when constructing a model instance

might support this syntax in the future:

sqliteSession.select<Client>().where({}).findFirst();	//returns Client
vector<Client> clients = sqliteSession.select<Client>().where({}).get()		//returns vector<Client>
clients[0].age = 23;
sqliteSession.save(c1);
sqliteSession.saveMany(clients);
sqliteSession.delete(c1);
sqliteSession.update(c1).where({}).set({});
sqliteSession.updateMany(clients).where({}).set({});
DB::defaultSession().saveMany(clients);

select
	tableName
	where
	orderBy
	limit

delete
	tableName
	where

update
	tableName
	where
	set

insert
	tableName
	values
